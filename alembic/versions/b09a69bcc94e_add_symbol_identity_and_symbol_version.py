"""add symbol_identity and symbol_version

Revision ID: b09a69bcc94e
Revises: d5dc4f5e293b
Create Date: 2025-08-26 11:30:49.589749
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'b09a69bcc94e'
down_revision: Union[str, Sequence[str], None] = 'd5dc4f5e293b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Safe upgrade for symbol_identity / symbol_version:
    - اگر جدول‌ها وجود نداشتند، می‌سازد.
    - اگر وجود داشتند، ستون‌ها/کانسترینت‌های لازم را اضافه/درست می‌کند.
    """

    # ---------------------------
    # 1) symbol_identity
    # ---------------------------
    op.execute("""
    CREATE TABLE IF NOT EXISTS symbol_identity (
        symbol_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        stock_ticker TEXT NOT NULL,
        name         TEXT,
        name_en      TEXT,
        created_at   TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
    );
    """)

    # اطمینان از وجود ستون‌ها و کانسترینت‌ها
    op.execute("""
    DO $$
    BEGIN
      -- name_en
      IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='symbol_identity' AND column_name='name_en'
      ) THEN
        ALTER TABLE symbol_identity ADD COLUMN name_en TEXT;
      END IF;

      -- created_at
      IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='symbol_identity' AND column_name='created_at'
      ) THEN
        ALTER TABLE symbol_identity ADD COLUMN created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW();
      END IF;

      -- یکتایی stock_ticker
      IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conrelid = 'symbol_identity'::regclass
          AND contype = 'u'
          AND conname = 'uq_symbol_identity_stock_ticker'
      ) THEN
        ALTER TABLE symbol_identity
          ADD CONSTRAINT uq_symbol_identity_stock_ticker UNIQUE (stock_ticker);
      END IF;
    END$$;
    """)

    # ---------------------------
    # 2) symbol_version
    # ---------------------------
    op.execute("""
    CREATE TABLE IF NOT EXISTS symbol_version (
        id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        symbol_id    INTEGER NOT NULL,
        inscode      BIGINT NOT NULL,
        stock_ticker TEXT NOT NULL,

        start_date   DATE,
        end_date     DATE,
        is_active    BOOLEAN NOT NULL DEFAULT TRUE,

        name         TEXT,
        name_en      TEXT,
        sector       TEXT,
        sector_code  BIGINT,
        subsector    TEXT,
        market       TEXT,
        panel        TEXT,
        instrumentid TEXT,
        share_number BIGINT,
        base_vol     BIGINT,

        created_at   TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
        updated_at   TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),

        CONSTRAINT uq_symbol_version_inscode UNIQUE (inscode),
        CONSTRAINT symbol_version_symbol_id_fkey
            FOREIGN KEY (symbol_id) REFERENCES symbol_identity(symbol_id) ON DELETE CASCADE
    );
    """)

    # تکمیل/اصلاح ستون‌ها و کانسترینت‌ها اگر جدول از قبل بوده
    op.execute("""
    DO $$
    BEGIN
      -- ستون‌ها: اگر نبودند اضافه شوند
      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='is_active') THEN
        ALTER TABLE symbol_version ADD COLUMN is_active BOOLEAN NOT NULL DEFAULT TRUE;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='name') THEN
        ALTER TABLE symbol_version ADD COLUMN name TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='name_en') THEN
        ALTER TABLE symbol_version ADD COLUMN name_en TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='sector') THEN
        ALTER TABLE symbol_version ADD COLUMN sector TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='sector_code') THEN
        ALTER TABLE symbol_version ADD COLUMN sector_code BIGINT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='subsector') THEN
        ALTER TABLE symbol_version ADD COLUMN subsector TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='market') THEN
        ALTER TABLE symbol_version ADD COLUMN market TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='panel') THEN
        ALTER TABLE symbol_version ADD COLUMN panel TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='instrumentid') THEN
        ALTER TABLE symbol_version ADD COLUMN instrumentid TEXT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='share_number') THEN
        ALTER TABLE symbol_version ADD COLUMN share_number BIGINT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='base_vol') THEN
        ALTER TABLE symbol_version ADD COLUMN base_vol BIGINT;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='created_at') THEN
        ALTER TABLE symbol_version ADD COLUMN created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW();
      END IF;

      IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                     WHERE table_name='symbol_version' AND column_name='updated_at') THEN
        ALTER TABLE symbol_version ADD COLUMN updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW();
      END IF;

      -- اصلاح نوع‌ها در صورت ناهماهنگی
      IF EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='symbol_version' AND column_name='sector_code'
                   AND data_type <> 'bigint') THEN
        ALTER TABLE symbol_version ALTER COLUMN sector_code TYPE BIGINT USING sector_code::bigint;
      END IF;

      IF EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='symbol_version' AND column_name='share_number'
                   AND data_type <> 'bigint') THEN
        ALTER TABLE symbol_version ALTER COLUMN share_number TYPE BIGINT USING share_number::bigint;
      END IF;

      IF EXISTS (SELECT 1 FROM information_schema.columns
                 WHERE table_name='symbol_version' AND column_name='base_vol'
                   AND data_type <> 'bigint') THEN
        ALTER TABLE symbol_version ALTER COLUMN base_vol TYPE BIGINT USING base_vol::bigint;
      END IF;

      -- یکتایی inscode
      IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conrelid = 'symbol_version'::regclass
          AND contype = 'u'
          AND conname = 'uq_symbol_version_inscode'
      ) THEN
        ALTER TABLE symbol_version
          ADD CONSTRAINT uq_symbol_version_inscode UNIQUE (inscode);
      END IF;

      -- FK به symbol_identity
      IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conrelid = 'symbol_version'::regclass
          AND contype = 'f'
          AND conname = 'symbol_version_symbol_id_fkey'
      ) THEN
        ALTER TABLE symbol_version
          ADD CONSTRAINT symbol_version_symbol_id_fkey
          FOREIGN KEY (symbol_id) REFERENCES symbol_identity(symbol_id) ON DELETE CASCADE;
      END IF;
    END$$;
    """)


def downgrade() -> None:
    """Downgrade schema for symbol_identity / symbol_version safely."""

    # 1) حذف همه FK/UK/PK های جدول symbol_version (اگر نام نداشته باشند هم حذف می‌شوند)
    op.execute("""
    DO $$
    DECLARE r record;
    BEGIN
      -- Drop all foreign keys
      FOR r IN
        SELECT conname
        FROM pg_constraint
        WHERE conrelid = 'symbol_version'::regclass
          AND contype = 'f'
      LOOP
        EXECUTE format('ALTER TABLE symbol_version DROP CONSTRAINT IF EXISTS %I', r.conname);
      END LOOP;

      -- Drop unique and primary key constraints
      FOR r IN
        SELECT conname
        FROM pg_constraint
        WHERE conrelid = 'symbol_version'::regclass
          AND contype IN ('u','p')
      LOOP
        EXECUTE format('ALTER TABLE symbol_version DROP CONSTRAINT IF EXISTS %I', r.conname);
      END LOOP;

      -- Drop check constraints (احتیاطی)
      FOR r IN
        SELECT conname
        FROM pg_constraint
        WHERE conrelid = 'symbol_version'::regclass
          AND contype = 'c'
      LOOP
        EXECUTE format('ALTER TABLE symbol_version DROP CONSTRAINT IF EXISTS %I', r.conname);
      END LOOP;
    END$$;
    """)

    # 2) حذف ایندکس‌های مستقل از کانسترینت (اگر وجود دارند)
    op.execute("""
    DO $$
    DECLARE r record;
    BEGIN
      FOR r IN
        SELECT indexname
        FROM pg_indexes
        WHERE tablename = 'symbol_version'
      LOOP
        EXECUTE format('DROP INDEX IF EXISTS %I', r.indexname);
      END LOOP;
    END$$;
    """)

    # 3) حالا جدول symbol_version را حذف کن
    op.execute("DROP TABLE IF EXISTS symbol_version CASCADE;")

    # 4) برای symbol_identity هم ابتدا کانسترینت‌های یکتا/کلیدی را پاک کن (اگر بود)
    op.execute("""
    DO $$
    DECLARE r record;
    BEGIN
      FOR r IN
        SELECT conname
        FROM pg_constraint
        WHERE conrelid = 'symbol_identity'::regclass
          AND contype IN ('u','p','f','c')
      LOOP
        EXECUTE format('ALTER TABLE symbol_identity DROP CONSTRAINT IF EXISTS %I', r.conname);
      END LOOP;
    END$$;
    """)

    # 5) حذف ایندکس‌های symbol_identity (اگر وجود دارند)
    op.execute("""
    DO $$
    DECLARE r record;
    BEGIN
      FOR r IN
        SELECT indexname
        FROM pg_indexes
        WHERE tablename = 'symbol_identity'
      LOOP
        EXECUTE format('DROP INDEX IF EXISTS %I', r.indexname);
      END LOOP;
    END$$;
    """)

    # 6) حذف جدول symbol_identity
    op.execute("DROP TABLE IF EXISTS symbol_identity CASCADE;")
